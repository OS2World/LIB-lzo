#
#  Makedefs.dos -- MSDOS makefile definitions for the LZO library
#
#  This file is part of the LZO real-time data compression library.
#
#  Copyright (C) 1997 Markus Franz Xaver Johannes Oberhumer
#  Copyright (C) 1996 Markus Franz Xaver Johannes Oberhumer
#
#  The LZO library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation; either version 2 of
#  the License, or (at your option) any later version.
#
#  The LZO library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with the LZO library; see the file COPYING.
#  If not, write to the Free Software Foundation, Inc.,
#  59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#  Markus F.X.J. Oberhumer
#  markus.oberhumer@jk.uni-linz.ac.at
#


#
# --- tools ---
# ftp://ftp.simtel.net/pub/simtelnet/msdos/4dos/4dos552.zip        (4DOS)
# ftp://ftp.simtel.net/pub/simtelnet/msdos/sysutl/uxutl23*.zip     (UNIX utils)
#
# --- djgpp v2 (MSDOS, 32 bit) ---
# http://www.delorie.com/djgpp
# ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2misc/csdpmi3b.zip (DPMI host)
# ftp://ftp.simtel.net/pub/simtelnet/gnu/djgpp/v2gnu/mak375b.zip   (GNU make)
#
# --- emx (MSDOS + OS/2, 32 bit) ---
# ftp://ftp-os2.nmsu.edu/os2/unix/emx09b/emxrt.zip                (emx runtime)
# ftp://ftp.uni-bielefeld.de/pub/systems/msdos/misc/rsx503rt.zip  (DPMI runtime)
# ftp://ftp-os2.nmsu.edu/os2/unix/gnumake.zip                     (GNU make)
#


# /***********************************************************************
# // MAIN CONFIGURATION
# // type something like 'gnumake target=djgpp2' to select your compiler
# ************************************************************************/

ifeq ($(strip $(target)),)
override target=borlandc_16
override target=emx
override target=msc_16
override target=watcomc_16
override target=watcomc_32
override target=djgpp2
endif


host_cpu = i486
host_os = MSDOS

mfx_dir_sep=\\
mfx_include_sep=/
mfx_vpath_sep=;
mfx_cur_dir=

E:=.exe


# /***********************************************************************
# // SYSTEM TOOLS
# // be sure you have some UNIX-like utilities installed
# ************************************************************************/

MAKEDEPEND = @MAKEDEPEND@

INSTALL = cp -p
INSTALL_DATA = $(INSTALL)
INSTALL_SCRIPT = $(INSTALL)

RM = rm -f

CAT = cat
CHMOD = chmod
FIND = gnufind
PERL = perl
SORT = gnusort


# /***********************************************************************
# // djgpp v2 + gcc 2.7.2 (MSDOS, 32 bit)
# ************************************************************************/

ifeq ($(target),djgpp2)

CC = gcc
MFX_GCC_WARN = 1
MFX_GCC_WARN_ALL = 1

ifeq ($(strip $(LZO_CPLUSPLUS)),)
CFLAGS += -Wp,-lang-c89
endif
## CFLAGS += -DHAVE_ZLIB_H
## LDLIBS += -lz
## CFLAGS += -ansi
## CFLAGS += -E -Wp,-dM
## CFLAGS_LZO += -DLZO_COLLECT_STATS
## LDFLAGS += -Wl,-warn-common

LZO_ARLIB = ar rcs $@ $^

endif


# /***********************************************************************
# // emx 0.9b + gcc 2.7.2 (MSDOS, 32 bit)
# ************************************************************************/

ifeq ($(target),emx)

CC = gcc
MFX_GCC_WARN = 1
MFX_GCC_WARN_ALL = 1

ifeq ($(strip $(LZO_CPLUSPLUS)),)
CFLAGS += -Wp,-lang-c89
endif

LZO_ARLIB = ar rcs $@ $^

endif


# /***********************************************************************
# // Watcom C32 v10.5 (MSDOS, 32 bit)
# ************************************************************************/

ifeq ($(target),watcomc_32)

mfx_include_sep=\\
MFX_<=$(subst /,\\,$<)

A:=.lib
O:=.obj
LIBLZO = lzo$A

ifeq ($(strip $(model)),)
override model = -zq -mf -5r
endif

CC = wcl386 $(model)
CFLAGS = -oneatx -wx		# use -oneax for Watcom C v9.5 (optimizer bug)

ifneq ($(strip $(LZO_CPLUSPLUS)),)
CFLAGS_LZO += -cc++		# treat files as C++ source
endif

ifneq ($(LZO_DEBUG),)
CFLAGS += -d1
else
# ???
endif

LZO_ARLIB = wlib -b $@ \@config\\wcc.rsp

OUTPUT_OPTION = -fo=$@
LINK.o_OUTPUT_OPTION = -fe=$@
## LINK.o_OUTPUT_OPTION += -l=pmodew	# link for PMODE/W

endif


# /***********************************************************************
# // Watcom C16 v10.5 (MSDOS, 16 bit)
# ************************************************************************/

ifeq ($(target),watcomc_16)

mfx_include_sep=\\
MFX_<=$(subst /,\\,$<)

A:=.lib
O:=.obj
LIBLZO = lzo$A

ifeq ($(strip $(model)),)
override model = -zq -ml -5
endif

CC = wcl $(model)
CFLAGS = -oneatx -wx		# use -oneax for Watcom C v9.5 (optimizer bug)

ifneq ($(strip $(LZO_CPLUSPLUS)),)
CFLAGS_LZO += -cc++		# treat files as C++ source
endif

ifneq ($(LZO_DEBUG),)
CFLAGS += -d1
else
# ???
endif

LZO_ARLIB = wlib -b $@ \@config\\wcc.rsp

OUTPUT_OPTION = -fo=$@
LINK.o_OUTPUT_OPTION = -fe=$@

endif


# /***********************************************************************
# // Borland C 4.0 (MSDOS, 16 bit)
# ************************************************************************/

ifeq ($(target),borlandc_16)

mfx_include_sep=\\
MFX_<=$(subst /,\\,$<)

A:=.lib
O:=.obj
LIBLZO = lzo$A

ifeq ($(strip $(model)),)
override model = -ml
endif

CC = bcc $(model)
CFLAGS = -h- -O -w -w-rch -w-par -4

ifneq ($(strip $(LZO_CPLUSPLUS)),)
CFLAGS_LZO += -P		# treat files as C++ source
endif

# the COMSPEC hack is needed because of a bug in tlib
LZO_ARLIB = $(COMSPEC) /C tlib $@ /C \@config\\bcc.rsp

OUTPUT_OPTION = -o$@
LINK.o_OUTPUT_OPTION = -e$@

endif


# /***********************************************************************
# // Microsoft C 7.0 (MSDOS, 16 bit)
# ************************************************************************/

ifeq ($(target),msc_16)

mfx_include_sep=\\
MFX_<=$(subst /,\\,$<)

A:=.lib
O:=.obj
LIBLZO = lzo$A

ifeq ($(strip $(model)),)
override model = -nologo -AL
endif

CC = cl $(model)
CFLAGS = -O -G2 -W3

LZO_ARLIB = lib $@ \@config\\msc.rsp, nul

OUTPUT_OPTION = -Fo$@
LINK.o_OUTPUT_OPTION = -Fe$@

ifneq ($(strip $(LZO_CPLUSPLUS)),)
## CFLAGS_LZO += -Tp		# treat files as C++ source
OUTPUT_OPTION += -Tp		# (this option must precede the filename)
endif

endif


